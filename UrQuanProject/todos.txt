

OK! (25-09-2016) Use HighOrderMacro to print on screen the name of InputTypes (Press, Release, etc) (25-09-2016)




Use typedefs for std::vector<Inputs::InputHandler*> ex (25-09-2016)
Adicionar método init para os estados, exemplo: init das AbstractOption do tipo imagem (pode dar errado!) (25-09-2016)
Adicionar mais um estado: Pressing. Para armas que tenham efeitos diferentes dependendo do tempo em que estão pressionadas (carregadas)
Acredito que as mensagens que DrawingComponents poderia receber deveriam ser parametrizadas (Enum enforced talvez) e não apenas String.
Abstrair o registro do listener para as ações. Exemplo: register(K, UP_ACTION, SHOOT); O shoot seria passado para o método handleInput (25-09-2016)
	Lugar ótimo para se testar essa implementação é o MenuComponent


27-09-2016
	- Implementar a funcionalidade do Menu exit do Jogo
	- Desenhar a primeira nave na tela MainRoundState (Drawing Component para o Ship).
	- 
	
	
Mover a Lógica do minimax do 360 graus para a action RotateAction OK!
Fire Pressing events to remove the need to listen for press and release
Rename VectorMath
ShooterComponent and PhysicsComponent não precisam ser ponteiros!
Efetuar limpeza na classe GameObject, muitos métodos getters e setter inócuos e implementações (handleInput) desnecessárias

Definir quem será o responsável por propagar as categorias do projéteis criados. Lembre-se, pode ser que o mesmo gameobject dispare 
projéteis com categorias diferentes.

Adicionar uma forma prática de customizar a criação do Ship
				DrawingComponent,
				PlayerType,
				ShipType,
				ProjectileFactory type etc??? DDD???
				
Adicionar uma DSL para criação de categorias customizáveis. Exemplo: Wall, colide com tudo e etc.

add clipsize 

add unregisterListener to the API